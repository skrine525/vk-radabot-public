from radabot.core.io import AdvancedOutputSystem, ChatEventManager
from radabot.core.manager import UserPermissions
from radabot.core.system import ManagerData, PageBuilder, SelectedUserParser, ArgumentParser, CommandHelpBuilder, get_reply_message_from_event, int2emoji
from radabot.core.vk import KeyboardBuilder, VKVariable
from radabot.core.bot import DEFAULT_MESSAGES


def initcmd(manager: ChatEventManager):
    manager.add_message_command('!–ø—Ä–∞–≤–∞', PermissionCommand.message_command)

    manager.add_callback_button_command('manager_permits', PermissionCommand.callback_button_command)


# –ö–æ–º–∞–Ω–¥–∞ !–ø—Ä–∞–≤–∞
class PermissionCommand:
    @staticmethod
    def message_command(callback_object: dict):
        event = callback_object["event"]
        args = callback_object["args"]
        db = callback_object["db"]
        output = callback_object["output"]

        aos = AdvancedOutputSystem(output, event, db)

        permissions_data = ManagerData.get_user_permissions_data()

        subcommand = args.get_str(1, '').lower()
        if subcommand == '–ø–æ–∫–∞–∑':
            member_parser = SelectedUserParser()
            member_parser.set_reply_message(get_reply_message_from_event(event))
            member_parser.set_argument_parser(args, 2)
            member_id = member_parser.member_id()

            if member_id == 0:
                permits_text = "–í–∞—à–∏ –ø—Ä–∞–≤–∞:"
                no_permits_text = "‚ùó–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤."
                member_id = event["object"]["message"]["from_id"]
            else:
                permits_text = "–ü—Ä–∞–≤–∞ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):".format(member_id)
                no_permits_text = "‚ùó–£ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –Ω–µ—Ç –ø—Ä–∞–≤.".format(member_id)

            user_permissions = UserPermissions(db, member_id)
            permission_list = user_permissions.get_all()
            true_permission_count = 0
            for k, v in permission_list.items():
                if v:
                    label = permissions_data[k]['label']
                    permits_text += "\n‚Ä¢ {}".format(label)
                    true_permission_count += 1

            if true_permission_count > 0:
                message = VKVariable.Multi('var', 'appeal', 'str', permits_text)
                aos.messages_send(message=message)
            else:
                message = VKVariable.Multi('var', 'appeal', 'str', no_permits_text)
                aos.messages_send(message=message)
        elif subcommand == '—É–ø—Ä':
            member_parser = SelectedUserParser()
            member_parser.set_reply_message(get_reply_message_from_event(event))
            member_parser.set_argument_parser(args, 2)
            member_id = member_parser.member_id()

            user_permissions = UserPermissions(db, event["object"]["message"]["from_id"])
            if user_permissions.get('set_permits'):
                if member_id > 0:
                    # –ü—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    can_manage_list = []
                    for k, v in user_permissions.get_all().items():
                        if not permissions_data[k]['hidden'] and v:
                            can_manage_list.append(k)
                    
                    # –£–¥–∞–ª—è–µ–º set_permits –∏–∑ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –ø—Ä–∞–≤, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
                    if event["object"]["message"]["from_id"] != db.owner_id:
                        can_manage_list.remove('set_permits')

                    # –û—à–∏–±–∫–∏
                    if len(can_manage_list) == 0:
                        message_text = '‚õî–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å.'
                        message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                        aos.messages_send(message=message)
                        return
                    elif member_id == event["object"]["message"]["from_id"]:
                        message_text = '‚õî–ù–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏.'
                        message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                        aos.messages_send(message=message)
                        return
                    elif member_id == db.owner_id:
                        message_text = '‚õî–ù–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–µ—Å–µ–¥—ã.'
                        message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                        aos.messages_send(message=message)
                        return
                    
                    if args.count > 2:
                        member_permissions = UserPermissions(db, member_id)

                        message_text = '–ü—Ä–∞–≤–∞ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):'.format(member_id)
                        for index in range(2, min(args.count, 12)):
                            permission_name = args.get_str(index, '').lower()
                            try:
                                permission_state = member_permissions.get(permission_name)
                                permission_label = permissions_data[permission_name]['label']
                                member_permissions.set(permission_name, not permission_state)

                                if permission_name in can_manage_list:
                                    if permission_state:
                                        message_text += '\n‚õî {}'.format(permission_label)
                                    else:
                                        message_text += '\n‚úÖ {}'.format(permission_label)
                                else:
                                    message_text += '\nüö´ {}'.format(permission_label)
                            except UserPermissions.UnknownPermissionException:
                                message_text += '\n‚ùì {}'.format(permission_name)

                        message_text += '\n\n–û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:\n‚úÖ - –ü—Ä–∞–≤–æ –≤—ã–¥–∞–Ω–æ\n‚õî - –ü—Ä–∞–≤–æ –æ—Ç–æ–∑–≤–∞–Ω–æ\nüö´ - –ó–∞–ø—Ä–µ—â–µ–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å\n‚ùì - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ'

                        member_permissions.commit()
                        message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                        aos.messages_send(message=message)
                    else:
                        permits_text = "–ü—É—Å—Ç–æ"
                        if len(can_manage_list) > 0:
                            permits_text = ', '.join(can_manage_list)
                        message = VKVariable.Multi('var', 'appeal', 'str', '‚õî–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∞ (–Ω–µ –±–æ–ª—å—à–µ 10 —à—Ç—É–∫).\n\n–ü—Ä–∞–≤–∞, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å: {}.'.format(permits_text))
                        keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
                        keyboard.callback_button('–£–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∞–º–∏', ['manager_permits', event["object"]["message"]["from_id"], 1, member_id], KeyboardBuilder.PRIMARY_COLOR)
                        aos.messages_send(message=message, keyboard=keyboard.build())
                else:
                    message_text = PermissionCommand.__get_error_message_select_user(args)
                    message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                    aos.messages_send(message=message)
            else:
                message = VKVariable.Multi('var', 'appeal', 'str', DEFAULT_MESSAGES.MESSAGE_YOU_HAVE_NO_RIGHTS)
                aos.messages_send(message=message)
        elif subcommand == '–∏–Ω—Ñ–∞':
            permission_name = args.get_str(2, '').lower()

            if permission_name == '':
                message_text = '–°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤:'
                for i in permissions_data:
                    # –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–∞–≤–∞
                    if not permissions_data[i]['hidden']:
                        message_text += '\n‚Ä¢ ' + i
                message_text += "\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚û°Ô∏è !–ø—Ä–∞–≤–∞ –∏–Ω—Ñ–∞ [–ø—Ä–∞–≤–æ]"

                keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
                keyboard.callback_button('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', ['manager_permits', event["object"]["message"]["from_id"], 2], KeyboardBuilder.PRIMARY_COLOR)

                message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                aos.messages_send(message=message, keyboard=keyboard.build())
            else:
                try:
                    permission_data = permissions_data[permission_name]
                    message_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\nüÜî–ü—Ä–∞–≤–æ: {}\n‚úè–ù–∞–∑–≤–∞–Ω–∏–µ: {}\nüìù–û–ø–∏—Å–∞–Ω–∏–µ: {}.".format(permission_name, permission_data['label'], permission_data['desc'])
                    message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                    aos.messages_send(message=message)
                except KeyError:
                    permits_text = '\n\n–°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤:'
                    for i in permissions_data:
                        permits_text += '\n‚Ä¢ ' + i
                    hint = '\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n‚û°Ô∏è !–ø—Ä–∞–≤–∞ –∏–Ω—Ñ–∞ [–ø—Ä–∞–≤–æ]'
                    message = VKVariable.Multi('var', 'appeal', 'str', "‚õî–ü—Ä–∞–≤–∞ '{}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.{}{}".format(permission_name, permits_text, hint))
                    aos.messages_send(message=message)
        else:
            message_text = PermissionCommand.__get_error_message_unknown_subcommand(args)
            message = VKVariable.Multi('var', 'appeal', 'str', message_text)
            aos.messages_send(message=message)

    @staticmethod
    def callback_button_command(callback_object: dict):
        event = callback_object["event"]
        payload = callback_object["payload"]
        db = callback_object["db"]
        output = callback_object["output"]

        aos = AdvancedOutputSystem(output, event, db)

        permissions_data = ManagerData.get_user_permissions_data()

        testing_user_id = payload.get_int(1, event["object"]["user_id"])
        if testing_user_id != event["object"]["user_id"]:
            aos.show_snackbar(text=DEFAULT_MESSAGES.SNACKBAR_NO_RIGHTS_TO_USE_THIS_BUTTON)
            return

        sub1 = payload.get_int(2, 0)
        if sub1 == 1:
            user_permissions = UserPermissions(db, event["object"]["user_id"])
            if user_permissions.get('set_permits'):
                member_id = payload.get_int(3, 0)
                if member_id > 0:
                     # –ü—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞, –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    can_manage_list = []
                    for k, v in user_permissions.get_all().items():
                        if not permissions_data[k]['hidden'] and v:
                            can_manage_list.append(k)

                    # –£–¥–∞–ª—è–µ–º set_permits –∏–∑ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –ø—Ä–∞–≤, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
                    if event["object"]["user_id"] != db.owner_id:
                        can_manage_list.remove('set_permits')

                    if len(can_manage_list) == 0:
                        aos.show_snackbar(text='‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å.')
                        return
                    elif member_id == event["object"]["user_id"]:
                        aos.show_snackbar(text='‚õî –ù–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏.')
                        return
                    elif member_id == db.owner_id:
                        aos.show_snackbar(text='‚õî –ù–µ–ª—å–∑—è —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–µ—Å–µ–¥—ã.')
                        return

                    member_permissions = UserPermissions(db, member_id)
                    page_number = payload.get_int(4, 1)
                    page_builder = PageBuilder(can_manage_list, 9)

                    can_commit = False
                    change_permission_name = payload.get_str(5, '')
                    if change_permission_name != '':
                        if change_permission_name in can_manage_list:
                            try:
                                new_state = not member_permissions.get(change_permission_name)
                                member_permissions.set(change_permission_name, new_state)
                                can_commit = True
                            except UserPermissions.UnknownPermissionException:
                                aos.show_snackbar(text='‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ.')
                                return
                        else:
                            aos.show_snackbar(text='‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π –ø—Ä–∞–≤.')
                            return

                    try:
                        page = page_builder(page_number)

                        message_text = '–ü—Ä–∞–≤–∞ @id{} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):'.format(member_id)
                        keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
                        keyboard.size(3)
                        for i in range(0, len(page)):
                            name = page[i]
                            state = member_permissions.get(name)
                            label = int2emoji(i+1)
                            color = KeyboardBuilder.POSITIVE_COLOR if state else KeyboardBuilder.NEGATIVE_COLOR
                            message_text += "\n{} {}".format(label, permissions_data[name]['label'])
                            keyboard.callback_button(label, ['manager_permits', testing_user_id, 1, member_id, page_number, name], color)
                        keyboard.reset_size(width=True)

                        keyboard.new_line()
                        if page_number > 1:
                            prev_number = page_number - 1
                            keyboard.callback_button("{} ‚¨Ö".format(int2emoji(prev_number)), ['manager_permits', testing_user_id, 1, member_id, prev_number], KeyboardBuilder.SECONDARY_COLOR)
                        if page_number < page_builder.max_number:
                            next_number = page_number + 1
                            keyboard.callback_button("‚û° {}".format(int2emoji(next_number)), ['manager_permits', testing_user_id, 1, member_id, next_number], KeyboardBuilder.SECONDARY_COLOR)
                        
                        keyboard.new_line()
                        keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', testing_user_id], KeyboardBuilder.NEGATIVE_COLOR)

                        message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                        aos.messages_edit(message=message, keyboard=keyboard.build())
                        if can_commit:
                            member_permissions.commit()
                    except PageBuilder.PageNumberException:
                        aos.show_snackbar(text='‚õî –û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å–ø–∏—Å–∫–∞.')
                else:
                    aos.show_snackbar(text='‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
            else:
                aos.show_snackbar(text=DEFAULT_MESSAGES.SNACKBAR_YOU_HAVE_NO_RIGHTS)
        elif sub1 == 2:
            page_number = payload.get_int(3, 1)
            permission_name = payload.get_str(4, '')
            if permission_name == '':
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ –Ω–µ—Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–∞–≤
                permission_names = []
                for i in permissions_data:
                    if not permissions_data[i]['hidden']:
                        permission_names.append(i)
                # –°–æ–∑–¥–∞–µ–º –±–∏–ª–¥–µ—Ä —Å–ø–∏—Å–∫–∞
                page_builder = PageBuilder(permission_names, 9)
                try:
                    page = page_builder(page_number)

                    message_text = '–°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤:'
                    keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
                    keyboard.size(3)
                    for i in range(0, len(page)):
                        name = page[i]
                        label = int2emoji(i+1)
                        message_text += '\n{} {}'.format(label, permissions_data[name]['label'])
                        keyboard.callback_button(label, ['manager_permits', testing_user_id, 2, page_number, name], KeyboardBuilder.POSITIVE_COLOR)
                    keyboard.reset_size(width=True)

                    keyboard.new_line()
                    if page_number > 1:
                        prev_number = page_number - 1
                        keyboard.callback_button("{} ‚¨Ö".format(int2emoji(prev_number)), ['manager_permits', testing_user_id, 2, prev_number], KeyboardBuilder.SECONDARY_COLOR)
                    if page_number < page_builder.max_number:
                        next_number = page_number + 1
                        keyboard.callback_button("‚û° {}".format(int2emoji(next_number)), ['manager_permits', testing_user_id, 2, next_number], KeyboardBuilder.SECONDARY_COLOR)

                    keyboard.new_line()
                    keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', testing_user_id], KeyboardBuilder.NEGATIVE_COLOR)

                    message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                    aos.messages_edit(message=message, keyboard=keyboard.build())
                except PageBuilder.PageNumberException:
                    aos.show_snackbar(text='‚õî –û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å–ø–∏—Å–∫–∞.')
            else:
                try:
                    permission_data = permissions_data[permission_name]
                    message_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\nüÜî–ü—Ä–∞–≤–æ: {}\n‚úè–ù–∞–∑–≤–∞–Ω–∏–µ: {}\nüìù–û–ø–∏—Å–∞–Ω–∏–µ: {}.".format(permission_name, permission_data['label'], permission_data['desc'])
                    keyboard = KeyboardBuilder(KeyboardBuilder.INLINE_TYPE)
                    keyboard.callback_button('‚¨Ö –ù–∞–∑–∞–¥', ['manager_permits', testing_user_id, 2, page_number], KeyboardBuilder.PRIMARY_COLOR)
                    keyboard.new_line()
                    keyboard.callback_button('–ó–∞–∫—Ä—ã—Ç—å', ['bot_cancel', testing_user_id], KeyboardBuilder.NEGATIVE_COLOR)
                    message = VKVariable.Multi('var', 'appeal', 'str', message_text)
                    aos.messages_edit(message=message, keyboard=keyboard.build())
                except KeyError:
                    aos.show_snackbar(text='‚õî –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ.')
        else:
            aos.show_snackbar(text=DEFAULT_MESSAGES.SNACKBAR_INTERNAL_ERROR)

    @staticmethod
    def __get_error_message_select_user(args: ArgumentParser):
        first_permission = list(ManagerData.get_user_permissions_data())[0]
        help_builder = CommandHelpBuilder('‚õî–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        help_builder.command('{} {} [id] [–Ω–∞–∑–≤–∞–Ω–∏–µ]', args.get_str(0).lower(), args.get_str(1).lower())
        help_builder.command('{} {} [–ø–µ—Ä–µ—Å–ª. —Å–æ–æ–±—â–µ–Ω–∏–µ] [–Ω–∞–∑–≤–∞–Ω–∏–µ]', args.get_str(0).lower(), args.get_str(1).lower())
        help_builder.command('{} {} [—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ] [–Ω–∞–∑–≤–∞–Ω–∏–µ]', args.get_str(0).lower(), args.get_str(1).lower())
        help_builder.example('{} {} @durov {}', args.get_str(0).lower(), args.get_str(1).lower(), first_permission)

        return help_builder.build()

    @staticmethod
    def __get_error_message_unknown_subcommand(args: ArgumentParser):
        help_builder = CommandHelpBuilder('‚õî–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–±–∫–æ–º–∞–Ω–¥–∞.')
        help_builder.command('{} –ø–æ–∫–∞–∑', args.get_str(0).lower())
        help_builder.command('{} –∏–Ω—Ñ–∞', args.get_str(0).lower())
        help_builder.command('{} —É–ø—Ä', args.get_str(0).lower())

        return help_builder.build()
